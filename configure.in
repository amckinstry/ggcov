dnl Process this file with autoconf to produce a configure script.
dnl You may need the --localdir option to get the included .m4's
dnl
dnl ggcov - A GTK frontend for exploring gcov coverage data
dnl Copyright (c) 2001-2005 Greg Banks <gnb@users.sourceforge.net>
dnl 
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl 
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl 
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
dnl 
dnl $Id: configure.in,v 1.79 2010-05-09 05:55:03 gnb Exp $
dnl

AC_INIT(src/ggcov.c)
AM_INIT_AUTOMAKE(ggcov, 0.8.2)
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE
RPM_SPEC_CONFIGURE_ARGS=

dnl Enabling debugging code
dnl This is mostly straight out of the automake manual.
AC_MSG_CHECKING(whether to enable debugging code)
AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging code],[
case "${enableval}" in
yes|no)
    debug=${enableval}
    ;;
*)
    AC_MSG_ERROR(bad value ${enableval} for --enable-debug)
    ;;
esac
],[debug=no])
AC_MSG_RESULT($debug)
AM_CONDITIONAL(DEBUG, test x$debug = xyes)

dnl Disable the GUI (useful for testing on headless platforms)
AC_MSG_CHECKING(whether to enable the GUI)
AC_ARG_ENABLE(gui,
[  --disable-gui           Do not build the GUI],[
case "${enableval}" in
yes|no)
    gui=${enableval}
    ;;
*)
    AC_MSG_ERROR(bad value ${enableval} for --enable-gui)
    ;;
esac
],[gui=yes])
AC_MSG_RESULT($gui)
AM_CONDITIONAL(GUI, test x$gui = xyes)
if test x$gui = xyes ; then
    GUIPROG=ggcov
else
    GUIPROG=
    RPM_SPEC_CONFIGURE_ARGS="$RPM_SPEC_CONFIGURE_ARGS --disable-gui"
fi
AC_SUBST(GUIPROG)

dnl Try to find the Berkeley DB in any of the odd places it might be hiding
DB_LIB_db42="db-4.2"
DB_CPPFLAGS_db42="-I/usr/include/db42"
DB_LDFLAGS_db42=""

DB_LIB_db41="db-4.1"
DB_CPPFLAGS_db41="-I/usr/include/db41"
DB_LDFLAGS_db41=""

DB_LIB_plain="db"
DB_CPPFLAGS_plain=""
DB_LDFLAGS_plain=""

DB_FLAVORS="db42 db41 plain"

found=no
web=yes
for flavor in $DB_FLAVORS ; do
    AC_MSG_NOTICE(Looking for Berkeley DB flavor $flavor)
    eval "lib=\$DB_LIB_$flavor"
    eval "ldflags=\$DB_LDFLAGS_$flavor"
    eval "cppflags=\$DB_CPPFLAGS_$flavor"

    oldCPPFLAGS="$CPPFLAGS"
    oldLIBS="$LIBS"
    CPPFLAGS="$cppflags $CPPFLAGS"
    found=yes
    AC_CHECK_HEADER(db.h,[],[found=no])
    AC_CHECK_LIB($lib,db_create,[],[found=no],$ldflags)
    CPPFLAGS="$oldCPPFLAGS"
    LIBS="$oldLIBS"
    test $found = yes && break
done
if test $found = yes ; then
    DB_CPPFLAGS="$cppflags"
    DB_LIBS="-l$lib $ldflags"
    AC_SUBST(DB_CPPFLAGS)
    AC_SUBST(DB_LIBS)
else
    AC_MSG_NOTICE(Cannot find db.h, disabling web interface)
    web=no
fi

dnl Disable the web interface (useful if you haven't got Berkeley DB)
AC_MSG_CHECKING(whether to enable the WWW interface)
AC_ARG_ENABLE(web,
[  --disable-web           Do not build the WWW interface],[
case "${enableval}" in
no) web=no ;;
yes) ;;
*)
    AC_MSG_ERROR(bad value ${enableval} for --enable-web)
    ;;
esac
])
AC_MSG_RESULT($web)
AM_CONDITIONAL(WEB, test x$web = xyes)
if test x$web = xyes ; then
    WEBPROG=ggcov-webdb
else
    WEBPROG=
    RPM_SPEC_CONFIGURE_ARGS="$RPM_SPEC_CONFIGURE_ARGS --disable-web"
fi
AC_SUBST(WEBPROG)


dnl Checks for programs.
AC_PROG_INSTALL
AC_PROG_AWK
AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CXX
AC_PROG_RANLIB

if test x$debug = xyes ; then
##   CFLAGS="$CFLAGS -DGTK_DISABLE_DEPRECATED=1 -DGLIB_DISABLE_DEPRECATED=1"
    echo "debug mode on"
fi

dnl Stuff for gettext
dnl ALL_LINGUAS="la"
dnl AM_GNU_GETTEXT

dnl Check for va_copy, it might not exist or might be broken
dnl in some compilation environments.
AC_MSG_CHECKING([whether va_copy works])
AC_TRY_RUN([
#include <stdarg.h>
#include <string.h>
static int baz(va_list args)
{
	int x = 0;
	x |= strcmp(va_arg(args, const char *), "hello");
	x |= strcmp(va_arg(args, const char *), "world");
	return x;
}
static int bar(va_list args)
{
	int x = 0;
	va_list args2;
	va_copy(args2, args);
	x |= baz(args);
	x |= baz(args2);
	return x;
}
static int foo(int a, ...)
{
	int x;
	va_list args;
	va_start(args, a);
	x = bar(args);
	va_end(args);
	return x;
}
int main(int argc, char **argv)
{
	return foo(42, "hello", "world");
}
],[
    AC_DEFINE(HAVE_VA_COPY,1,[Whether the va_copy builtin works])
    AC_MSG_RESULT(yes)
],[
    AC_MSG_RESULT(no)
])


dnl Checks for libraries.
AC_ARG_WITH(bfd,
[  --without-bfd           Don't use BFD library (callgraphs will not work)],
[],[with_bfd=yes])
if test $with_bfd = yes ; then
AC_CHECK_LIB(iberty, obstack_free)
AC_CHECK_LIB(bfd, bfd_init)

dnl Sometime before binutils 2.15.92.0.2, the field _raw_size
dnl in the asection struct was renamed to rawsize.
AC_MSG_CHECKING([name of raw size field in struct bfd_section])
AC_TRY_COMPILE([
#include <bfd.h>
],[
    return (int)(&((asection *)0)->rawsize);
],[
    AC_DEFINE(HAVE_BFD_ASECTION_RAWSIZE,1,[Whether the raw size field in struct bfd_section is called rawsize])
    AC_MSG_RESULT(rawsize)
],[
    AC_MSG_RESULT(_raw_size)
])
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(malloc.h sys/ioctl.h sys/time.h unistd.h memory.h)
AC_CHECK_HEADERS(signal.h sys/filio.h stdint.h elf.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_PID_T


dnl A bunch of warning options for gcc
dnl -Wshadow
dnl TODO: -Weffc++
AC_GCC_ADD_CFLAGS([-Wall -Wchar-subscripts 
    	    	   -Wpointer-arith -Wsign-compare
		   -pedantic -Wno-long-long])

AC_GCC_ADD_CFLAGS([-fno-rtti -fno-exceptions -fno-implement-inlines])


dnl Use the latest version of gtk which actually is complete and works.
dnl Should result in: gtk 1.2 on RedHat 7.3, gtk 2 on RedHat 8 & greater.

ifdef([PKG_PROG_PKG_CONFIG],[
PKG_PROG_PKG_CONFIG
])

# try gtk 2.0
have_gconf=no
if test x$gui = xyes ; then
    # gui enabled
    libpopt=no
    PKG_CHECK_MODULES(GGCOV_GUI, libglade-2.0 >= 2.0.0 libgnomeui-2.0 >= 2.0.0,
    	    	      [gtk2=yes],[gtk2=no])
    if test $gtk2 = yes ; then
	PKG_CHECK_MODULES(GCONF, gconf-2.0 >= 2.4.0,have_gconf=yes)
	PKG_CHECK_MODULES(GGCOV_CLI, glib-2.0 >= 2.0.0 libxml-2.0 >= 2.0.0)

	dnl we don't need --export-dynamic anymore, remove it
	dnl so the executable will be smaller
	GGCOV_GUI_LIBS=`echo "$GGCOV_GUI_LIBS" | sed -e 's/-Wl,--export-dynamic//g'`
	GCONF_LIBS=`echo "$GCONF_LIBS" | sed -e 's/-Wl,--export-dynamic//g'`

	AC_CHECK_LIB(gtk-x11-2.0, gtk_text_buffer_select_range,
		  AC_DEFINE(HAVE_GTK_TEXT_BUFFER_SELECT_RANGE,1,[
     * The function gtk_text_buffer_select_range may or may
     * not be present in the gtk2 libraries...we have to work
     * around it if not.
    ]),,
		  [$GGCOV_GUI_LIBS])
	GGCOV_GLADE_FILE=ggcov-glade2.glade
	# gnome2 doesn't need popt, so it may or may not be present
	AC_CHECK_LIB(popt,poptGetContext,
    	    	     [ libpopt=yes ;  LIBS="$LIBS -lpopt" ],,
		     $GGCOV_GUI_CFLAGS $GGCOV_GUI_LIBS)

    	gprog=no
	AC_CHECK_LIB(gnome,gnome_program_init,[gprog=yes],,[$GGCOV_GUI_LIBS])
	if test $gprog = no ; then
	    AC_CHECK_LIB(gnome-2,gnome_program_init,[gprog=yes],,[$GGCOV_GUI_LIBS])
	fi
	if test $gprog = yes ; then
	      AC_DEFINE(HAVE_GNOME_PROGRAM_INIT,1,[
    Whether to use the GnomeProgram feature to initialise GNOME.
    ])
	fi
    else
ifdef([AM_PATH_LIBGLADE],[
	# fall back to gtk 1.2
	AC_MSG_WARN([GNOME version 2 libraries not found, falling back to 1.2])
	AM_PATH_LIBGLADE(,AC_MSG_ERROR(ggcov requires the libglade library),gnome)
	AM_PATH_IMLIB(,,AC_MSG_ERROR(ggcov requires the libgdk_imlib library))
	AM_PATH_GLIB(,,AC_MSG_ERROR(ggcov requires the glib library))
	GGCOV_GUI_CFLAGS="$LIBGLADE_CFLAGS $IMLIB_CFLAGS"
	GGCOV_GUI_LIBS="$LIBGLADE_LIBS $IMLIB_LIBS"
	GGCOV_CLI_CFLAGS="$GLIB_CFLAGS"
	GGCOV_CLI_LIBS="$GLIB_LIBS -lpopt"
	GGCOV_GLADE_FILE=ggcov.glade
	# gnome1.2 requires popt so we can assume it's present
	libpopt=yes
],[
    	AC_MSG_ERROR([ggcov requires the GNOME libraries, unless configured with --disable-gui])
])
    fi
    AC_SUBST(GGCOV_GUI_CFLAGS)
    AC_SUBST(GGCOV_GUI_LIBS)
    AC_SUBST(GGCOV_GLADE_FILE)
else
    # gui disabled
    PKG_CHECK_MODULES(GGCOV_CLI, glib-2.0 >= 2.0.0 libxml-2.0 >= 2.0.0, [glib2=yes],[glib2=no])
    if test $glib2 = no ; then
ifdef([AM_PATH_LIBGLADE],[
	# fall back to glib 1.2
	AC_MSG_WARN([glib version 2 library not found, falling back to 1.2])
	AM_PATH_GLIB(,,AC_MSG_ERROR(ggcov requires the glib library))
	GGCOV_CLI_CFLAGS="$GLIB_CFLAGS"
	GGCOV_CLI_LIBS="$GLIB_LIBS"
],[
    	AC_MSG_ERROR([ggcov requires the glib library])
])
    fi
    # we're headless, so we have no idea whether libpopt is present
    AC_CHECK_LIB(popt,poptGetContext,
    	    	[ libpopt=yes ;  LIBS="$LIBS -lpopt" ],[ libpopt=no ],
		$GGCOV_CLI_CFLAGS $GGCOV_CLI_LIBS)
fi
AC_SUBST(GGCOV_CLI_CFLAGS)
AC_SUBST(GGCOV_CLI_LIBS)

if test $have_gconf = yes ; then
    GCONF=
    AC_DEFINE(HAVE_LIBGCONF,1,[
    	Whether the GConf library for storing application preferences is available.])
else
    GCONF="#"
fi
AM_CONDITIONAL(GCONF, test $have_gconf = yes)
AC_SUBST(GCONF)

AC_CHECK_LIB(glib-2.0, g_hash_table_iter_init,
	     AC_DEFINE(HAVE_G_HASH_TABLE_ITER,1,[
 * An iterator for GHashTables may or may not be present
 * in the glib library...we have to work around it if not.
]),,
	      [$GGCOV_CLI_LIBS])
    
if test $libpopt = yes ; then
    AC_DEFINE(HAVE_LIBPOPT,,[Define to 1 if the popt library is present])
fi

dnl Compile C and C++ with the same (C++) compiler.
CXXFLAGS="$CFLAGS"
CC="$CXX"

AC_CANONICAL_HOST

AC_MSG_CHECKING(for cpu-specific defines)
CPU_DEFINES=
case "$host_cpu" in
i?86|i86pc) CPU_DEFINES=-DCOV_I386 ;;
esac
AC_MSG_RESULT($CPU_DEFINES)
AC_SUBST(CPU_DEFINES)

AC_MSG_CHECKING(for OS-specific defines)
OS_DEFINES=
is_linux=no
is_redhat=no
case "$host_os" in
solaris*) OS_DEFINES=-DELF_TARGET_ALL ;;
linux*) is_linux=yes ;;
esac
AC_MSG_RESULT($OS_DEFINES)
AC_SUBST(OS_DEFINES)

if test x$is_linux = xyes ; then
    AC_MSG_CHECKING(for Linux distro-specific defines)
    dnl Are we on RedHat or similar, e.g. CentOS?
    if test -f /etc/redhat-release ; then
	is_redhat=yes
    fi
fi
AM_CONDITIONAL(REDHAT, test x$is_redhat = xyes)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_TYPE_SIGNAL
AC_FUNC_WAIT3
AC_CHECK_FUNCS(putenv regcomp strchr)
AC_CHECK_FUNCS(sincos)

AC_SUBST(RPM_SPEC_CONFIGURE_ARGS)

dnl AC_SUBST(ALL_LINGUAS)
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_OUTPUT([
    Makefile
    src/Makefile
    src/libiberty/Makefile
    scripts/Makefile
    ui/Makefile
    doc/Makefile
    php/Makefile
    php/lib/Makefile
    php/basic/Makefile
    ggcov.spec
    version.m4
    test/Makefile
])
dnl intl/Makefile po/Makefile.in
